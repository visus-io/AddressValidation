// This file is ported and adapted from CommunityToolkit.Mvvm (CommunityToolkit/dotnet),
// more info in ThirdPartyNotices.txt in the root of the project.

namespace Visus.AddressValidation.SourceGeneration.Model;

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

internal partial class HierarchyInfo
{
	public CompilationUnitSyntax? GetCompilationUnit(ImmutableArray<MemberDeclarationSyntax> memberDeclarations)
	{
		TypeDeclarationSyntax typeDeclarationSyntax =
			Hierarchy[0].GetSyntax()
						.AddModifiers(Token(TriviaList(Comment("/// <inheritdoc/>")),
											Hierarchy[0].AccessibilityKind,
											TriviaList()))
						.AddModifiers(GetKeywordModifierTokens(Hierarchy[0]))
						.AddMembers([.. memberDeclarations])
						.NormalizeWhitespace();

		foreach ( TypeInfo parentType in Hierarchy.AsSpan().Slice(1) )
		{
			typeDeclarationSyntax =
				parentType.GetSyntax()
						  .AddModifiers(Token(TriviaList(Comment("/// <inheritdoc/>")),
											  parentType.AccessibilityKind,
											  TriviaList()))
						  .AddModifiers(GetKeywordModifierTokens(parentType))
						  .AddMembers(typeDeclarationSyntax)
						  .NormalizeWhitespace();
		}

		SyntaxTriviaList syntaxTriviaList = TriviaList(
													   Comment("// <auto-generated/>"),
													   Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
													   Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)));

		return CompilationUnit()
			  .AddMembers(NamespaceDeclaration(IdentifierName(Namespace))
						 .WithLeadingTrivia(syntaxTriviaList)
						 .AddMembers(typeDeclarationSyntax))
			  .NormalizeWhitespace();
	}

	private static SyntaxToken[] GetKeywordModifierTokens(TypeInfo typeInfo)
	{
		HashSet<SyntaxToken> tokens = [];

		if ( typeInfo.IsSealed )
		{
			tokens.Add(Token(SyntaxKind.SealedKeyword));
		}

		tokens.Add(Token(SyntaxKind.PartialKeyword));

		return [.. tokens];
	}
}
